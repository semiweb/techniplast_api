=begin
#Guardian API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0_alpha3
Contact: marco.storto@tecniplast.it
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0

=end

require 'cgi'

module Tecniplast
  class AppliancesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.new)
      @api_client = api_client
    end
    # Get alarms
    # Returns alarms for a single appliance, with actual timestamp > startTimestamp and <= endTimestamp <br> In case number of alarms is > 1000 only the first 1000 records will be returned
    # @param serial [String] serial number of appliance
    # @param start_timestamp [String] start timestamp of time interval in UTC, ISO 8601 encoded
    # @param end_timestamp [String] end timestamp of time interval in UTC, ISO 8601 encoded
    # @param [Hash] opts the optional parameters
    # @return [AlarmsList]
    def get_appliance_alarms(serial, start_timestamp, end_timestamp, opts = {})
      data, _status_code, _headers = get_appliance_alarms_with_http_info(serial, start_timestamp, end_timestamp, opts)
      data
    end

    # Get alarms
    # Returns alarms for a single appliance, with actual timestamp &gt; startTimestamp and &lt;&#x3D; endTimestamp &lt;br&gt; In case number of alarms is &gt; 1000 only the first 1000 records will be returned
    # @param serial [String] serial number of appliance
    # @param start_timestamp [String] start timestamp of time interval in UTC, ISO 8601 encoded
    # @param end_timestamp [String] end timestamp of time interval in UTC, ISO 8601 encoded
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlarmsList, Integer, Hash)>] AlarmsList data, response status code and response headers
    def get_appliance_alarms_with_http_info(serial, start_timestamp, end_timestamp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppliancesApi.get_appliance_alarms ...'
      end
      # verify the required parameter 'serial' is set
      if @api_client.config.client_side_validation && serial.nil?
        fail ArgumentError, "Missing the required parameter 'serial' when calling AppliancesApi.get_appliance_alarms"
      end
      # verify the required parameter 'start_timestamp' is set
      if @api_client.config.client_side_validation && start_timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'start_timestamp' when calling AppliancesApi.get_appliance_alarms"
      end
      # verify the required parameter 'end_timestamp' is set
      if @api_client.config.client_side_validation && end_timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'end_timestamp' when calling AppliancesApi.get_appliance_alarms"
      end
      # resource path
      local_var_path = '/guardian/v1/appliances/{serial}/alarms'.sub('{' + 'serial' + '}', CGI.escape(serial.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startTimestamp'] = start_timestamp
      query_params[:'endTimestamp'] = end_timestamp

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AlarmsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AppliancesApi.get_appliance_alarms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppliancesApi#get_appliance_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get measures
    # Returns measures for a single appliance and a type, with actual timestamp > startTimestamp and <= endTimestamp <br> In case number of measures is > 1000 only the first 1000 records will be returned
    # @param serial [String] serial number of appliance
    # @param type [String] type of measures
    # @param start_timestamp [String] start timestamp of time interval in UTC, ISO 8601 encoded
    # @param end_timestamp [String] end timestamp of time interval in UTC, ISO 8601 encoded
    # @param [Hash] opts the optional parameters
    # @return [MeasuresList]
    def get_appliance_measures(serial, type, start_timestamp, end_timestamp, opts = {})
      data, _status_code, _headers = get_appliance_measures_with_http_info(serial, type, start_timestamp, end_timestamp, opts)
      data
    end

    # Get measures
    # Returns measures for a single appliance and a type, with actual timestamp &gt; startTimestamp and &lt;&#x3D; endTimestamp &lt;br&gt; In case number of measures is &gt; 1000 only the first 1000 records will be returned
    # @param serial [String] serial number of appliance
    # @param type [String] type of measures
    # @param start_timestamp [String] start timestamp of time interval in UTC, ISO 8601 encoded
    # @param end_timestamp [String] end timestamp of time interval in UTC, ISO 8601 encoded
    # @param [Hash] opts the optional parameters
    # @return [Array<(MeasuresList, Integer, Hash)>] MeasuresList data, response status code and response headers
    def get_appliance_measures_with_http_info(serial, type, start_timestamp, end_timestamp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppliancesApi.get_appliance_measures ...'
      end
      # verify the required parameter 'serial' is set
      if @api_client.config.client_side_validation && serial.nil?
        fail ArgumentError, "Missing the required parameter 'serial' when calling AppliancesApi.get_appliance_measures"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AppliancesApi.get_appliance_measures"
      end
      # verify the required parameter 'start_timestamp' is set
      if @api_client.config.client_side_validation && start_timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'start_timestamp' when calling AppliancesApi.get_appliance_measures"
      end
      # verify the required parameter 'end_timestamp' is set
      if @api_client.config.client_side_validation && end_timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'end_timestamp' when calling AppliancesApi.get_appliance_measures"
      end
      # resource path
      local_var_path = '/guardian/v1/appliances/{serial}/measures/{type}'.sub('{' + 'serial' + '}', CGI.escape(serial.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startTimestamp'] = start_timestamp
      query_params[:'endTimestamp'] = end_timestamp

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MeasuresList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AppliancesApi.get_appliance_measures",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppliancesApi#get_appliance_measures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get measures types
    # Returns all measures types available for individual appliance
    # @param serial [String] serial number of appliance
    # @param [Hash] opts the optional parameters
    # @return [MeasuresTypeList]
    def get_appliance_measures_type(serial, opts = {})
      data, _status_code, _headers = get_appliance_measures_type_with_http_info(serial, opts)
      data
    end

    # Get measures types
    # Returns all measures types available for individual appliance
    # @param serial [String] serial number of appliance
    # @param [Hash] opts the optional parameters
    # @return [Array<(MeasuresTypeList, Integer, Hash)>] MeasuresTypeList data, response status code and response headers
    def get_appliance_measures_type_with_http_info(serial, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppliancesApi.get_appliance_measures_type ...'
      end
      # verify the required parameter 'serial' is set
      if @api_client.config.client_side_validation && serial.nil?
        fail ArgumentError, "Missing the required parameter 'serial' when calling AppliancesApi.get_appliance_measures_type"
      end
      # resource path
      local_var_path = '/guardian/v1/appliances/{serial}/measures'.sub('{' + 'serial' + '}', CGI.escape(serial.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MeasuresTypeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AppliancesApi.get_appliance_measures_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppliancesApi#get_appliance_measures_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get profile associated to appliance
    # Returns profile for a single appliance
    # @param serial [String] serial number of appliance
    # @param [Hash] opts the optional parameters
    # @return [SetPoint]
    def get_appliance_profile(serial, opts = {})
      data, _status_code, _headers = get_appliance_profile_with_http_info(serial, opts)
      data
    end

    # Get profile associated to appliance
    # Returns profile for a single appliance
    # @param serial [String] serial number of appliance
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetPoint, Integer, Hash)>] SetPoint data, response status code and response headers
    def get_appliance_profile_with_http_info(serial, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppliancesApi.get_appliance_profile ...'
      end
      # verify the required parameter 'serial' is set
      if @api_client.config.client_side_validation && serial.nil?
        fail ArgumentError, "Missing the required parameter 'serial' when calling AppliancesApi.get_appliance_profile"
      end
      # resource path
      local_var_path = '/guardian/v1/appliances/{serial}/profile'.sub('{' + 'serial' + '}', CGI.escape(serial.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetPoint'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AppliancesApi.get_appliance_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppliancesApi#get_appliance_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List appliances
    # Returns measures for a single appliance
    # @param [Hash] opts the optional parameters
    # @return [ApplianceList]
    def get_appliances_list(opts = {})
      data, _status_code, _headers = get_appliances_list_with_http_info(opts)
      data
    end

    # List appliances
    # Returns measures for a single appliance
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceList, Integer, Hash)>] ApplianceList data, response status code and response headers
    def get_appliances_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppliancesApi.get_appliances_list ...'
      end
      # resource path
      local_var_path = '/guardian/v1/appliances'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AppliancesApi.get_appliances_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppliancesApi#get_appliances_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate profile to appliance
    # Configure setpoints for a single appliance
    # @param serial [String] serial number of appliance
    # @param [Hash] opts the optional parameters
    # @option opts [SetPointSearch] :set_point_search 
    # @return [SetPoint]
    def set_appliance_profile(serial, opts = {})
      data, _status_code, _headers = set_appliance_profile_with_http_info(serial, opts)
      data
    end

    # Associate profile to appliance
    # Configure setpoints for a single appliance
    # @param serial [String] serial number of appliance
    # @param [Hash] opts the optional parameters
    # @option opts [SetPointSearch] :set_point_search 
    # @return [Array<(SetPoint, Integer, Hash)>] SetPoint data, response status code and response headers
    def set_appliance_profile_with_http_info(serial, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppliancesApi.set_appliance_profile ...'
      end
      # verify the required parameter 'serial' is set
      if @api_client.config.client_side_validation && serial.nil?
        fail ArgumentError, "Missing the required parameter 'serial' when calling AppliancesApi.set_appliance_profile"
      end
      # resource path
      local_var_path = '/guardian/v1/appliances/{serial}/profile'.sub('{' + 'serial' + '}', CGI.escape(serial.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_point_search'])

      # return_type
      return_type = opts[:debug_return_type] || 'SetPoint'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AppliancesApi.set_appliance_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppliancesApi#set_appliance_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
