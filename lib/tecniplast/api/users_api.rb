=begin
#DVC AMS API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2.0.0
Contact: marco.storto@tecniplast.it
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.0

=end

require 'uri'

module Tecniplast
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # get list of users
    # @param [Hash] opts the optional parameters
    # @return [UserList]
    def inventory_users_get(opts = {})
      data, _status_code, _headers = inventory_users_get_with_http_info(opts)
      data
    end

    # get list of users
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserList, Fixnum, Hash)>] UserList data, response status code and response headers
    def inventory_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.inventory_users_get ...'
      end
      # resource path
      local_var_path = '/inventory/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#inventory_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create a new user
    # @param [Hash] opts the optional parameters
    # @option opts [UserCreate] :user_create 
    # @return [UserResponse]
    def inventory_users_post(opts = {})
      data, _status_code, _headers = inventory_users_post_with_http_info(opts)
      data
    end

    # create a new user
    # @param [Hash] opts the optional parameters
    # @option opts [UserCreate] :user_create 
    # @return [Array<(UserResponse, Fixnum, Hash)>] UserResponse data, response status code and response headers
    def inventory_users_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.inventory_users_post ...'
      end
      # resource path
      local_var_path = '/inventory/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'user_create'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#inventory_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # remove an existing user
    # @param username id of user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def inventory_users_username_delete(username, opts = {})
      inventory_users_username_delete_with_http_info(username, opts)
      nil
    end

    # remove an existing user
    # @param username id of user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def inventory_users_username_delete_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.inventory_users_username_delete ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UsersApi.inventory_users_username_delete"
      end
      # resource path
      local_var_path = '/inventory/users/{username}'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#inventory_users_username_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get an existing user
    # @param username id of user
    # @param [Hash] opts the optional parameters
    # @return [UserResponse]
    def inventory_users_username_get(username, opts = {})
      data, _status_code, _headers = inventory_users_username_get_with_http_info(username, opts)
      data
    end

    # get an existing user
    # @param username id of user
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserResponse, Fixnum, Hash)>] UserResponse data, response status code and response headers
    def inventory_users_username_get_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.inventory_users_username_get ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UsersApi.inventory_users_username_get"
      end
      # resource path
      local_var_path = '/inventory/users/{username}'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#inventory_users_username_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # modify an existing user
    # @param username id of user
    # @param [Hash] opts the optional parameters
    # @option opts [UserUpdate] :user_update 
    # @return [UserResponse]
    def inventory_users_username_put(username, opts = {})
      data, _status_code, _headers = inventory_users_username_put_with_http_info(username, opts)
      data
    end

    # modify an existing user
    # @param username id of user
    # @param [Hash] opts the optional parameters
    # @option opts [UserUpdate] :user_update 
    # @return [Array<(UserResponse, Fixnum, Hash)>] UserResponse data, response status code and response headers
    def inventory_users_username_put_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.inventory_users_username_put ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling UsersApi.inventory_users_username_put"
      end
      # resource path
      local_var_path = '/inventory/users/{username}'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'user_update'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#inventory_users_username_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
