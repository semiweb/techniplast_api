=begin
#DVC AMS API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2.0.0
Contact: marco.storto@tecniplast.it
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.0

=end

require 'uri'

module Tecniplast
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # get list of tasks planned for today
    # @param [Hash] opts the optional parameters
    # @option opts [WorkUnitType] :work_unit_type Filters by type
    # @option opts [WorkUnitStatus] :work_unit_status Filters by status
    # @option opts [String] :planned_date Filter by planned date, in ISO 8601 format
    # @option opts [Integer] :start page start (default to 0)
    # @option opts [Integer] :size page size (default to 1000)
    # @return [WorkUnitsList]
    def jobs_get(opts = {})
      data, _status_code, _headers = jobs_get_with_http_info(opts)
      data
    end

    # get list of tasks planned for today
    # @param [Hash] opts the optional parameters
    # @option opts [WorkUnitType] :work_unit_type Filters by type
    # @option opts [WorkUnitStatus] :work_unit_status Filters by status
    # @option opts [String] :planned_date Filter by planned date, in ISO 8601 format
    # @option opts [Integer] :start page start
    # @option opts [Integer] :size page size
    # @return [Array<(WorkUnitsList, Fixnum, Hash)>] WorkUnitsList data, response status code and response headers
    def jobs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.jobs_get ...'
      end
      # resource path
      local_var_path = '/jobs'

      # query parameters
      query_params = {}
      query_params[:'workUnitType'] = opts[:'work_unit_type'] if !opts[:'work_unit_type'].nil?
      query_params[:'workUnitStatus'] = opts[:'work_unit_status'] if !opts[:'work_unit_status'].nil?
      query_params[:'plannedDate'] = opts[:'planned_date'] if !opts[:'planned_date'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkUnitsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#jobs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # report task completion
    # @param uuid id of task
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [nil]
    def jobs_uuid_close_post(uuid, user, opts = {})
      jobs_uuid_close_post_with_http_info(uuid, user, opts)
      nil
    end

    # report task completion
    # @param uuid id of task
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def jobs_uuid_close_post_with_http_info(uuid, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.jobs_uuid_close_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling TasksApi.jobs_uuid_close_post"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling TasksApi.jobs_uuid_close_post"
      end
      # resource path
      local_var_path = '/jobs/{uuid}/close'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'user'] = user

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#jobs_uuid_close_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
