=begin
#DVC AMS API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2.0.0
Contact: marco.storto@tecniplast.it
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.0

=end

require 'uri'

module Tecniplast
  class CagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This path identifies the operation of searching for one or more cage
    # Use one or more of the following parameter in the query to filter the result. If no parameter is given then all the cages known to the DVC that have been prepared, but not yet dismissed are returned<br>Parameter name is case insensitive
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ams_protocol_id Filters all cages assigned to the specified protocol
    # @option opts [String] :ams_researcher_id Filters all cages belonging to the specified researcher
    # @option opts [String] :ams_mouse_id Find the cage with the specified mouse
    # @option opts [String] :ams_rack_id Find all the cages in this rack
    # @option opts [String] :ams_room_id Find all the cages in this room
    # @option opts [Integer] :page page number (default to 1)
    # @option opts [Integer] :size page size (default to 1000)
    # @return [CageList]
    def get_cages(opts = {})
      data, _status_code, _headers = get_cages_with_http_info(opts)
      data
    end

    # This path identifies the operation of searching for one or more cage
    # Use one or more of the following parameter in the query to filter the result. If no parameter is given then all the cages known to the DVC that have been prepared, but not yet dismissed are returned&lt;br&gt;Parameter name is case insensitive
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ams_protocol_id Filters all cages assigned to the specified protocol
    # @option opts [String] :ams_researcher_id Filters all cages belonging to the specified researcher
    # @option opts [String] :ams_mouse_id Find the cage with the specified mouse
    # @option opts [String] :ams_rack_id Find all the cages in this rack
    # @option opts [String] :ams_room_id Find all the cages in this room
    # @option opts [Integer] :page page number
    # @option opts [Integer] :size page size
    # @return [Array<(CageList, Fixnum, Hash)>] CageList data, response status code and response headers
    def get_cages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CagesApi.get_cages ...'
      end
      # resource path
      local_var_path = '/inventory/cages'

      # query parameters
      query_params = {}
      query_params[:'AmsProtocolId'] = opts[:'ams_protocol_id'] if !opts[:'ams_protocol_id'].nil?
      query_params[:'AmsResearcherId'] = opts[:'ams_researcher_id'] if !opts[:'ams_researcher_id'].nil?
      query_params[:'AmsMouseId'] = opts[:'ams_mouse_id'] if !opts[:'ams_mouse_id'].nil?
      query_params[:'AmsRackId'] = opts[:'ams_rack_id'] if !opts[:'ams_rack_id'].nil?
      query_params[:'AmsRoomId'] = opts[:'ams_room_id'] if !opts[:'ams_room_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CageList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CagesApi#get_cages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Using the DELETE method you can force the dismiss of a cage
    # @param ams_cage_id id of cage to modify
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def inventory_cages_ams_cage_id_delete(ams_cage_id, user, opts = {})
      inventory_cages_ams_cage_id_delete_with_http_info(ams_cage_id, user, opts)
      nil
    end

    # Using the DELETE method you can force the dismiss of a cage
    # @param ams_cage_id id of cage to modify
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def inventory_cages_ams_cage_id_delete_with_http_info(ams_cage_id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CagesApi.inventory_cages_ams_cage_id_delete ...'
      end
      # verify the required parameter 'ams_cage_id' is set
      if @api_client.config.client_side_validation && ams_cage_id.nil?
        fail ArgumentError, "Missing the required parameter 'ams_cage_id' when calling CagesApi.inventory_cages_ams_cage_id_delete"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling CagesApi.inventory_cages_ams_cage_id_delete"
      end
      # resource path
      local_var_path = '/inventory/cages/{AmsCageId}'.sub('{' + 'AmsCageId' + '}', ams_cage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'user'] = user

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CagesApi#inventory_cages_ams_cage_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get single cage
    # @param ams_cage_id id of cage to modify
    # @param [Hash] opts the optional parameters
    # @return [Cage]
    def inventory_cages_ams_cage_id_get(ams_cage_id, opts = {})
      data, _status_code, _headers = inventory_cages_ams_cage_id_get_with_http_info(ams_cage_id, opts)
      data
    end

    # Get single cage
    # @param ams_cage_id id of cage to modify
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cage, Fixnum, Hash)>] Cage data, response status code and response headers
    def inventory_cages_ams_cage_id_get_with_http_info(ams_cage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CagesApi.inventory_cages_ams_cage_id_get ...'
      end
      # verify the required parameter 'ams_cage_id' is set
      if @api_client.config.client_side_validation && ams_cage_id.nil?
        fail ArgumentError, "Missing the required parameter 'ams_cage_id' when calling CagesApi.inventory_cages_ams_cage_id_get"
      end
      # resource path
      local_var_path = '/inventory/cages/{AmsCageId}'.sub('{' + 'AmsCageId' + '}', ams_cage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CagesApi#inventory_cages_ams_cage_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This path allows the caller to change the data about exactly one cage.
    # @param ams_cage_id id of cage to modify
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @option opts [CageLabel] :cage_label 
    # @return [CageLabel]
    def inventory_cages_ams_cage_id_put(ams_cage_id, user, opts = {})
      data, _status_code, _headers = inventory_cages_ams_cage_id_put_with_http_info(ams_cage_id, user, opts)
      data
    end

    # This path allows the caller to change the data about exactly one cage.
    # @param ams_cage_id id of cage to modify
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @option opts [CageLabel] :cage_label 
    # @return [Array<(CageLabel, Fixnum, Hash)>] CageLabel data, response status code and response headers
    def inventory_cages_ams_cage_id_put_with_http_info(ams_cage_id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CagesApi.inventory_cages_ams_cage_id_put ...'
      end
      # verify the required parameter 'ams_cage_id' is set
      if @api_client.config.client_side_validation && ams_cage_id.nil?
        fail ArgumentError, "Missing the required parameter 'ams_cage_id' when calling CagesApi.inventory_cages_ams_cage_id_put"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling CagesApi.inventory_cages_ams_cage_id_put"
      end
      # resource path
      local_var_path = '/inventory/cages/{AmsCageId}'.sub('{' + 'AmsCageId' + '}', ams_cage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'user'] = user

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'cage_label'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CageLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CagesApi#inventory_cages_ams_cage_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # By posting on this endpoint you may force the creation of a cage in the DVC system without requiring any operator action.
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Cage]
    def inventory_cages_post(user, opts = {})
      data, _status_code, _headers = inventory_cages_post_with_http_info(user, opts)
      data
    end

    # By posting on this endpoint you may force the creation of a cage in the DVC system without requiring any operator action.
    # @param user username of the user performing the change
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(Cage, Fixnum, Hash)>] Cage data, response status code and response headers
    def inventory_cages_post_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CagesApi.inventory_cages_post ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling CagesApi.inventory_cages_post"
      end
      # resource path
      local_var_path = '/inventory/cages'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'user'] = user

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CagesApi#inventory_cages_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This enables to modify a list of cages in a single transaction
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CageSplitsInner>] :cage_splits_inner 
    # @return [CageList]
    def inventory_cages_split_post(opts = {})
      data, _status_code, _headers = inventory_cages_split_post_with_http_info(opts)
      data
    end

    # This enables to modify a list of cages in a single transaction
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CageSplitsInner>] :cage_splits_inner 
    # @return [Array<(CageList, Fixnum, Hash)>] CageList data, response status code and response headers
    def inventory_cages_split_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CagesApi.inventory_cages_split_post ...'
      end
      # resource path
      local_var_path = '/inventory/cages/split'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'cage_splits_inner'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CageList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CagesApi#inventory_cages_split_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
